==================================================
違い
==================================================

ROOTマクロなどを実行する際に使うインタプリタが ``CINT`` から ``CINT++`` に変更されました。
細かい違いは全く分かりませんが、文法のチェックが厳密になったみたいです。

実は ``ROOT5`` ではC言語／C++言語の文法的には間違っているマクロでも動いてくれました [#]_ 。
そのため、テストで作ったマクロで動作確認した後、より多くのデータを解析するためにコンパイルするとエラーが多出。
そのデバッグに追われるということが多々ありました。

``ROOT6`` では、このマクロの文法チェックも厳しくなったようです。
その証拠に、試しに ``ROOT5`` のチュートリアルを ``ROOT6`` で実行してみると、``warning`` や ``error`` がたくさん表示されます。

また、エラーの内容を詳しく教えてくれるようになっています。
やってしまいがちな行末のセミコロンのつけ忘れなども指摘してくれるので、これで場所の分からない ``segmentation fault`` に悩まされることも減るかもしれません。

.. [#] よく知られていると思われるのは、a.b でも a->bでも動いちゃうことでしょうか


ROOT5のチュートリアルをROOT6で実行してみた
==================================================

ROOT5の文法がROOT6と異なることを確かめてみましょう。

#. ROOT6が **active** になっていることを確認（ :command:`port select --list root` ）
#. ``ROOT5のチュートリアル`` を置いたディレクトリへ移動（ :command:`cd ...source/tutorials/root5/` ）
#. ``root (=root6)`` を起動（ :command:`root` ）
#. ``Warning`` という文字が出るのを確認 [#]_

.. figure:: ./root-tutorial/root5-root6-diff.png


.. [#] 出力を全部確認すると ``Error`` の文字も見つかります
